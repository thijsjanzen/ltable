// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sim_bd_cpp
Rcpp::List sim_bd_cpp(const std::vector<double>& params, double max_time, double max_species, bool max_species_extant, double min_species, bool non_extinction, bool verbose, int max_tries, int seed, bool return_tree_size_hist, bool start_at_crown);
RcppExport SEXP _ltable_sim_bd_cpp(SEXP paramsSEXP, SEXP max_timeSEXP, SEXP max_speciesSEXP, SEXP max_species_extantSEXP, SEXP min_speciesSEXP, SEXP non_extinctionSEXP, SEXP verboseSEXP, SEXP max_triesSEXP, SEXP seedSEXP, SEXP return_tree_size_histSEXP, SEXP start_at_crownSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< double >::type max_species(max_speciesSEXP);
    Rcpp::traits::input_parameter< bool >::type max_species_extant(max_species_extantSEXP);
    Rcpp::traits::input_parameter< double >::type min_species(min_speciesSEXP);
    Rcpp::traits::input_parameter< bool >::type non_extinction(non_extinctionSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type max_tries(max_triesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type return_tree_size_hist(return_tree_size_histSEXP);
    Rcpp::traits::input_parameter< bool >::type start_at_crown(start_at_crownSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_bd_cpp(params, max_time, max_species, max_species_extant, min_species, non_extinction, verbose, max_tries, seed, return_tree_size_hist, start_at_crown));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ltable_sim_bd_cpp", (DL_FUNC) &_ltable_sim_bd_cpp, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_ltable(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
